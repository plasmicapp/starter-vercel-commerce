// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: g4Ez5Lq65bFwpS9M8VgRuA
// Component: 2H8_-Jd25igKZ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { ProductBox } from "@plasmicpkgs/commerce"; // plasmic-import: IIjALUY38UxWl2/codeComponent
import ProductCard from "../../ProductCard"; // plasmic-import: FvHW5jBcyeTo6/component
import { ProductTextField } from "@plasmicpkgs/commerce"; // plasmic-import: 84UgBqHFxPIhs-/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_next_js_commerce.module.css"; // plasmic-import: g4Ez5Lq65bFwpS9M8VgRuA/projectcss
import sty from "./PlasmicProductGrid.module.css"; // plasmic-import: 2H8_-Jd25igKZ/css

export type PlasmicProductGrid__VariantMembers = {
  layout: "b";
};

export type PlasmicProductGrid__VariantsArgs = {
  layout?: SingleChoiceArg<"b">;
};

type VariantPropType = keyof PlasmicProductGrid__VariantsArgs;
export const PlasmicProductGrid__VariantProps = new Array<VariantPropType>(
  "layout"
);

export type PlasmicProductGrid__ArgsType = {
  product0?: React.ReactNode;
  product1?: React.ReactNode;
  product2?: React.ReactNode;
};

type ArgPropType = keyof PlasmicProductGrid__ArgsType;
export const PlasmicProductGrid__ArgProps = new Array<ArgPropType>(
  "product0",
  "product1",
  "product2"
);

export type PlasmicProductGrid__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultProductGridProps {
  product0?: React.ReactNode;
  product1?: React.ReactNode;
  product2?: React.ReactNode;
  layout?: SingleChoiceArg<"b">;
  className?: string;
}

function PlasmicProductGrid__RenderFunc(props: {
  variants: PlasmicProductGrid__VariantsArgs;
  args: PlasmicProductGrid__ArgsType;
  overrides: PlasmicProductGrid__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        sty.root,
        { [sty.rootlayout_b]: hasVariant(variants, "layout", "b") }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__udZcp, {
          [sty.freeBoxlayout_b__udZcpuYKyB]: hasVariant(variants, "layout", "b")
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <ProductBox
              className={classNames("__wab_instance", sty.productBox___87Hl7)}
              noLayout={false}
            >
              <ProductCard
                className={classNames("__wab_instance", sty.productCard__nwhH)}
                color={"violet" as const}
                imageIndex={0 as const}
              />
            </ProductBox>
          ),

          value: args.product0
        })}
      </div>

      <div
        className={classNames(projectcss.all, sty.freeBox__bULgO, {
          [sty.freeBoxlayout_b__bULgOuYKyB]: hasVariant(variants, "layout", "b")
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <ProductBox
              className={classNames("__wab_instance", sty.productBox__ptSl)}
              noLayout={false}
            >
              <ProductCard
                className={classNames("__wab_instance", sty.productCard__q9M1E)}
                color={"white" as const}
                imageIndex={0 as const}
              />
            </ProductBox>
          ),

          value: args.product1
        })}
      </div>

      <div
        className={classNames(projectcss.all, sty.freeBox__sgVgk, {
          [sty.freeBoxlayout_b__sgVgkuYKyB]: hasVariant(variants, "layout", "b")
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <ProductBox
              className={classNames("__wab_instance", sty.productBox__kbhrU)}
              noLayout={false}
            >
              <ProductCard
                className={classNames("__wab_instance", sty.productCard__pqEIb)}
                color={"pink" as const}
                imageIndex={0 as const}
              />
            </ProductBox>
          ),

          value: args.product2
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductGrid__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductGrid__VariantsArgs;
    args?: PlasmicProductGrid__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductGrid__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProductGrid__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicProductGrid__ArgProps,
      internalVariantPropNames: PlasmicProductGrid__VariantProps
    });

    return PlasmicProductGrid__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductGrid";
  } else {
    func.displayName = `PlasmicProductGrid.${nodeName}`;
  }
  return func;
}

export const PlasmicProductGrid = Object.assign(
  // Top-level PlasmicProductGrid renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicProductGrid
    internalVariantProps: PlasmicProductGrid__VariantProps,
    internalArgProps: PlasmicProductGrid__ArgProps
  }
);

export default PlasmicProductGrid;
/* prettier-ignore-end */
