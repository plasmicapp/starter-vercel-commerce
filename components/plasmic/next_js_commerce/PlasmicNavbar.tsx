// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: g4Ez5Lq65bFwpS9M8VgRuA
// Component: RYN9c2WQmTlJA
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavItem from "../../NavItem"; // plasmic-import: pflHqo5_0S051/component
import SearchLink from "../../code-components/SearchLink"; // plasmic-import: OjVZcvy3IwZTte/codeComponent
import { CategoryCollection } from "@plasmicpkgs/commerce"; // plasmic-import: u4JDWkLumjaUpM/codeComponent
import { CategoryLink } from "@plasmicpkgs/commerce"; // plasmic-import: ujLcAUEA7LtaTl/codeComponent
import { CategoryField } from "@plasmicpkgs/commerce"; // plasmic-import: k5ikEyqhoXasz6/codeComponent
import TextInput from "../../TextInput"; // plasmic-import: zd49r9Guz8Zmd/component
import Cart from "../../Cart"; // plasmic-import: VrqWzl1NfOir6N/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_next_js_commerce.module.css"; // plasmic-import: g4Ez5Lq65bFwpS9M8VgRuA/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: RYN9c2WQmTlJA/css

import LogoIcon from "./icons/PlasmicIcon__Logo"; // plasmic-import: qyLXGaZB_ZF0il/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: 4oCmflPUkHm_RM/icon
import WishlistIcon from "./icons/PlasmicIcon__Wishlist"; // plasmic-import: Yf3H-tuN-cRTC1/icon

export type PlasmicNavbar__VariantMembers = {};

export type PlasmicNavbar__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavbar__VariantsArgs;
export const PlasmicNavbar__VariantProps = new Array<VariantPropType>();

export type PlasmicNavbar__ArgsType = {
  query?: string;
};

type ArgPropType = keyof PlasmicNavbar__ArgsType;
export const PlasmicNavbar__ArgProps = new Array<ArgPropType>("query");

export type PlasmicNavbar__OverridesType = {
  root?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  searchLink?: p.Flex<typeof SearchLink>;
  categoryCollection?: p.Flex<typeof CategoryCollection>;
  categoryLink?: p.Flex<typeof CategoryLink>;
  categoryField?: p.Flex<typeof CategoryField>;
  textInput?: p.Flex<typeof TextInput>;
  cart?: p.Flex<typeof Cart>;
  textbox?: p.Flex<typeof TextInput>;
};

export interface DefaultNavbarProps {
  query?: string;
  className?: string;
}

function PlasmicNavbar__RenderFunc(props: {
  variants: PlasmicNavbar__VariantsArgs;
  args: PlasmicNavbar__ArgsType;
  overrides: PlasmicNavbar__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__v5Hpy)}
        >
          <p.PlasmicLink
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(projectcss.all, projectcss.a, sty.link)}
            component={Link}
            href={"/" as const}
            platform={"nextjs"}
          >
            <LogoIcon
              className={classNames(projectcss.all, sty.svg__bJkyH)}
              role={"img"}
            />
          </p.PlasmicLink>

          <NavItem className={classNames("__wab_instance", sty.navItem__vYrmf)}>
            <SearchLink
              data-plasmic-name={"searchLink"}
              data-plasmic-override={overrides.searchLink}
              className={classNames("__wab_instance", sty.searchLink)}
              searchPage={"/search" as const}
            >
              {"All"}
            </SearchLink>
          </NavItem>

          <CategoryCollection
            data-plasmic-name={"categoryCollection"}
            data-plasmic-override={overrides.categoryCollection}
            className={classNames("__wab_instance", sty.categoryCollection)}
            emptyMessage={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__o8Fw8
                )}
              >
                {"No collection found!"}
              </div>
            }
            loadingMessage={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___8ThPd
                )}
              >
                {"Loading..."}
              </div>
            }
            noLayout={true}
          >
            <NavItem
              className={classNames("__wab_instance", sty.navItem__wj2BL)}
            >
              <CategoryLink
                data-plasmic-name={"categoryLink"}
                data-plasmic-override={overrides.categoryLink}
                className={classNames("__wab_instance", sty.categoryLink)}
                linkDest={"/search/{slug}" as const}
              >
                <CategoryField
                  data-plasmic-name={"categoryField"}
                  data-plasmic-override={overrides.categoryField}
                  className={classNames("__wab_instance", sty.categoryField)}
                  field={"name" as const}
                />
              </CategoryLink>
            </NavItem>
          </CategoryCollection>
        </p.Stack>
      ) : null}

      <TextInput
        data-plasmic-name={"textInput"}
        data-plasmic-override={overrides.textInput}
        className={classNames("__wab_instance", sty.textInput)}
        color={"dark" as const}
        defaultValue={args.query}
        endIcon={
          <SearchsvgIcon
            className={classNames(projectcss.all, sty.svg___8G94N)}
            role={"img"}
          />
        }
        showEndIcon={true}
      />

      {true ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__uSgeI)}
        >
          <Cart
            data-plasmic-name={"cart"}
            data-plasmic-override={overrides.cart}
            className={classNames("__wab_instance", sty.cart)}
          />

          <WishlistIcon
            className={classNames(projectcss.all, sty.svg__ucrQq)}
            role={"img"}
          />

          <div className={classNames(projectcss.all, sty.freeBox__tsSK)} />
        </p.Stack>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "link",
    "searchLink",
    "categoryCollection",
    "categoryLink",
    "categoryField",
    "textInput",
    "textbox",
    "cart"
  ],
  link: ["link"],
  searchLink: ["searchLink"],
  categoryCollection: ["categoryCollection", "categoryLink", "categoryField"],
  categoryLink: ["categoryLink", "categoryField"],
  categoryField: ["categoryField"],
  textInput: ["textInput", "textbox"],
  cart: ["cart"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
  searchLink: typeof SearchLink;
  categoryCollection: typeof CategoryCollection;
  categoryLink: typeof CategoryLink;
  categoryField: typeof CategoryField;
  textInput: typeof TextInput;
  cart: typeof Cart;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbar__VariantsArgs;
    args?: PlasmicNavbar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavbar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavbar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavbar__ArgProps,
      internalVariantPropNames: PlasmicNavbar__VariantProps
    });

    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    searchLink: makeNodeComponent("searchLink"),
    categoryCollection: makeNodeComponent("categoryCollection"),
    categoryLink: makeNodeComponent("categoryLink"),
    categoryField: makeNodeComponent("categoryField"),
    textInput: makeNodeComponent("textInput"),
    cart: makeNodeComponent("cart"),

    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
