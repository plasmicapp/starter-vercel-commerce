// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: g4Ez5Lq65bFwpS9M8VgRuA
// Component: FvHW5jBcyeTo6
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { ProductLink } from "@plasmicpkgs/commerce"; // plasmic-import: t362fgW6eiCe/codeComponent
import { ProductTextField } from "@plasmicpkgs/commerce"; // plasmic-import: S1F4q0wN6b/codeComponent
import { ProductPriceComponent } from "@plasmicpkgs/commerce"; // plasmic-import: _PaJxGc8gf/codeComponent
import { ProductMedia } from "@plasmicpkgs/commerce"; // plasmic-import: qpULM0wwWW/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_next_js_commerce.module.css"; // plasmic-import: g4Ez5Lq65bFwpS9M8VgRuA/projectcss
import sty from "./PlasmicProductCard.module.css"; // plasmic-import: FvHW5jBcyeTo6/css

import WishlistIcon from "./icons/PlasmicIcon__Wishlist"; // plasmic-import: Yf3H-tuN-cRTC1/icon

export type PlasmicProductCard__VariantMembers = {
  color: "violet" | "white" | "black" | "pink";
  shape: "slim";
  hideWishlist: "hideWishlist";
  imageUrl: "imageUrl";
  hidePrice: "hidePrice";
};

export type PlasmicProductCard__VariantsArgs = {
  color?: SingleChoiceArg<"violet" | "white" | "black" | "pink">;
  shape?: SingleChoiceArg<"slim">;
  hideWishlist?: SingleBooleanChoiceArg<"hideWishlist">;
  imageUrl?: SingleBooleanChoiceArg<"imageUrl">;
  hidePrice?: SingleBooleanChoiceArg<"hidePrice">;
};

type VariantPropType = keyof PlasmicProductCard__VariantsArgs;
export const PlasmicProductCard__VariantProps = new Array<VariantPropType>(
  "color",
  "shape",
  "hideWishlist",
  "imageUrl",
  "hidePrice"
);

export type PlasmicProductCard__ArgsType = {
  imageIndex?: number;
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicProductCard__ArgsType;
export const PlasmicProductCard__ArgProps = new Array<ArgPropType>(
  "imageIndex",
  "children"
);

export type PlasmicProductCard__OverridesType = {
  root?: p.Flex<"div">;
  productLink?: p.Flex<typeof ProductLink>;
  svg?: p.Flex<"svg">;
  productPrice?: p.Flex<typeof ProductPriceComponent>;
  imageContainer?: p.Flex<"div">;
  productTextField?: p.Flex<typeof ProductTextField>;
};

export interface DefaultProductCardProps {
  imageIndex?: number;
  children?: React.ReactNode;
  color?: SingleChoiceArg<"violet" | "white" | "black" | "pink">;
  shape?: SingleChoiceArg<"slim">;
  hideWishlist?: SingleBooleanChoiceArg<"hideWishlist">;
  imageUrl?: SingleBooleanChoiceArg<"imageUrl">;
  hidePrice?: SingleBooleanChoiceArg<"hidePrice">;
  className?: string;
}

function PlasmicProductCard__RenderFunc(props: {
  variants: PlasmicProductCard__VariantsArgs;
  args: PlasmicProductCard__ArgsType;
  overrides: PlasmicProductCard__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootcolor_black]: hasVariant(variants, "color", "black"),
          [sty.rootcolor_pink]: hasVariant(variants, "color", "pink"),
          [sty.rootcolor_violet]: hasVariant(variants, "color", "violet"),
          [sty.rootcolor_white]: hasVariant(variants, "color", "white"),
          [sty.rootimageUrl]: hasVariant(variants, "imageUrl", "imageUrl"),
          [sty.rootshape_slim]: hasVariant(variants, "shape", "slim")
        }
      )}
    >
      <ProductLink
        data-plasmic-name={"productLink"}
        data-plasmic-override={overrides.productLink}
        className={classNames("__wab_instance", sty.productLink, {
          [sty.productLinkshape_slim]: hasVariant(variants, "shape", "slim")
        })}
        linkDest={"/product/{slug}" as const}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__ksiqw, {
            [sty.freeBoxcolor_violet__ksiqw0Pz3W]: hasVariant(
              variants,
              "color",
              "violet"
            ),
            [sty.freeBoxhideWishlist__ksiqwIfIsz]: hasVariant(
              variants,
              "hideWishlist",
              "hideWishlist"
            ),
            [sty.freeBoximageUrl__ksiqw6V69E]: hasVariant(
              variants,
              "imageUrl",
              "imageUrl"
            ),
            [sty.freeBoxshape_slim__ksiqwLbo9M]: hasVariant(
              variants,
              "shape",
              "slim"
            )
          })}
        >
          {(hasVariant(variants, "shape", "slim") ? true : true) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__mdmf, {
                [sty.freeBoxhideWishlist__mdmfIfIsz]: hasVariant(
                  variants,
                  "hideWishlist",
                  "hideWishlist"
                ),
                [sty.freeBoximageUrl__mdmf6V69E]: hasVariant(
                  variants,
                  "imageUrl",
                  "imageUrl"
                ),
                [sty.freeBoxshape_slim__mdmfLbo9M]: hasVariant(
                  variants,
                  "shape",
                  "slim"
                )
              })}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__k8Pk, {
                  [sty.freeBoxcolor_white__k8PkD3TlB]: hasVariant(
                    variants,
                    "color",
                    "white"
                  ),
                  [sty.freeBoxhideWishlist__k8PkIfIsz]: hasVariant(
                    variants,
                    "hideWishlist",
                    "hideWishlist"
                  ),
                  [sty.freeBoximageUrl__k8Pk6V69E]: hasVariant(
                    variants,
                    "imageUrl",
                    "imageUrl"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__mLwH, {
                    [sty.freeBoxhideWishlist__mLwHIfIsz]: hasVariant(
                      variants,
                      "hideWishlist",
                      "hideWishlist"
                    )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__rfkrp)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <ProductTextField
                          className={classNames(
                            "__wab_instance",
                            sty.productTextField__eBbs6
                          )}
                          field={"name" as const}
                        />
                      ),

                      value: args.children
                    })}
                  </div>

                  {(
                    hasVariant(variants, "hideWishlist", "hideWishlist")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__o602G,
                        {
                          [sty.freeBoxhideWishlist__o602GIfIsz]: hasVariant(
                            variants,
                            "hideWishlist",
                            "hideWishlist"
                          )
                        }
                      )}
                    >
                      <WishlistIcon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg, {
                          [sty.svgcolor_white]: hasVariant(
                            variants,
                            "color",
                            "white"
                          )
                        })}
                        role={"img"}
                      />
                    </div>
                  ) : null}
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__ab5Sk)}>
                  {(
                    hasVariant(variants, "hidePrice", "hidePrice") ? true : true
                  ) ? (
                    <ProductPriceComponent
                      data-plasmic-name={"productPrice"}
                      data-plasmic-override={overrides.productPrice}
                      className={classNames(
                        "__wab_instance",
                        sty.productPrice,
                        {
                          [sty.productPricecolor_white]: hasVariant(
                            variants,
                            "color",
                            "white"
                          ),
                          [sty.productPricehidePrice]: hasVariant(
                            variants,
                            "hidePrice",
                            "hidePrice"
                          )
                        }
                      )}
                    />
                  ) : null}
                </div>
              </p.Stack>

              <div
                className={classNames(projectcss.all, sty.freeBox___1Kp1D, {
                  [sty.freeBoximageUrl___1Kp1D6V69E]: hasVariant(
                    variants,
                    "imageUrl",
                    "imageUrl"
                  ),
                  [sty.freeBoxshape_slim___1Kp1DLbo9M]: hasVariant(
                    variants,
                    "shape",
                    "slim"
                  )
                })}
              >
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__j7Ru7, {
                      [sty.freeBoximageUrl__j7Ru76V69E]: hasVariant(
                        variants,
                        "imageUrl",
                        "imageUrl"
                      )
                    })}
                  >
                    {(
                      hasVariant(variants, "imageUrl", "imageUrl") ? true : true
                    ) ? (
                      <ProductMedia
                        className={classNames(
                          "__wab_instance",
                          sty.productMedia__od7Uo,
                          {
                            [sty.productMediacolor_black__od7UoUtNNd]:
                              hasVariant(variants, "color", "black"),
                            [sty.productMediacolor_pink__od7UOsKuQd]:
                              hasVariant(variants, "color", "pink"),
                            [sty.productMediacolor_violet__od7Uo0Pz3W]:
                              hasVariant(variants, "color", "violet"),
                            [sty.productMediacolor_white__od7Uod3TlB]:
                              hasVariant(variants, "color", "white"),
                            [sty.productMediahidePrice__od7UoxQazN]: hasVariant(
                              variants,
                              "hidePrice",
                              "hidePrice"
                            ),
                            [sty.productMediahideWishlist__od7UoIfIsz]:
                              hasVariant(
                                variants,
                                "hideWishlist",
                                "hideWishlist"
                              ),
                            [sty.productMediaimageUrl__od7Uo6V69E]: hasVariant(
                              variants,
                              "imageUrl",
                              "imageUrl"
                            ),
                            [sty.productMediashape_slim__od7UoLbo9M]:
                              hasVariant(variants, "shape", "slim")
                          }
                        )}
                      />
                    ) : null}
                    {(
                      hasVariant(variants, "imageUrl", "imageUrl") ? true : true
                    ) ? (
                      <div
                        data-plasmic-name={"imageContainer"}
                        data-plasmic-override={overrides.imageContainer}
                        className={classNames(
                          projectcss.all,
                          sty.imageContainer,
                          {
                            [sty.imageContainerimageUrl]: hasVariant(
                              variants,
                              "imageUrl",
                              "imageUrl"
                            )
                          }
                        )}
                      />
                    ) : null}
                  </div>
                ) : null}
              </div>
            </div>
          ) : null}
          {(hasVariant(variants, "shape", "slim") ? true : true) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox___37FWi, {
                [sty.freeBoxshape_slim___37FWiLbo9M]: hasVariant(
                  variants,
                  "shape",
                  "slim"
                )
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__rewxf, {
                  [sty.freeBoxshape_slim__rewxfLbo9M]: hasVariant(
                    variants,
                    "shape",
                    "slim"
                  )
                })}
              >
                <ProductMedia
                  className={classNames(
                    "__wab_instance",
                    sty.productMedia__hn8Hq,
                    {
                      [sty.productMediashape_slim__hn8HqLbo9M]: hasVariant(
                        variants,
                        "shape",
                        "slim"
                      )
                    }
                  )}
                />
              </div>

              <div
                className={classNames(projectcss.all, sty.freeBox__taxSm, {
                  [sty.freeBoxshape_slim__taxSmLbo9M]: hasVariant(
                    variants,
                    "shape",
                    "slim"
                  ),
                  [sty.freeBoxshape_slim_color_black__taxSmLbo9MUtNNd]:
                    hasVariant(variants, "shape", "slim") &&
                    hasVariant(variants, "color", "black")
                })}
              >
                <ProductTextField
                  data-plasmic-name={"productTextField"}
                  data-plasmic-override={overrides.productTextField}
                  className={classNames(
                    "__wab_instance",
                    sty.productTextField,
                    {
                      [sty.productTextFieldshape_slim]: hasVariant(
                        variants,
                        "shape",
                        "slim"
                      ),
                      [sty.productTextFieldshape_slim_color_black]:
                        hasVariant(variants, "shape", "slim") &&
                        hasVariant(variants, "color", "black")
                    }
                  )}
                  field={"name" as const}
                />
              </div>
            </div>
          ) : null}
        </div>
      </ProductLink>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "productLink",
    "svg",
    "productPrice",
    "imageContainer",
    "productTextField"
  ],
  productLink: [
    "productLink",
    "svg",
    "productPrice",
    "imageContainer",
    "productTextField"
  ],
  svg: ["svg"],
  productPrice: ["productPrice"],
  imageContainer: ["imageContainer"],
  productTextField: ["productTextField"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  productLink: typeof ProductLink;
  svg: "svg";
  productPrice: typeof ProductPriceComponent;
  imageContainer: "div";
  productTextField: typeof ProductTextField;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductCard__VariantsArgs;
    args?: PlasmicProductCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProductCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicProductCard__ArgProps,
      internalVariantPropNames: PlasmicProductCard__VariantProps
    });

    return PlasmicProductCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductCard";
  } else {
    func.displayName = `PlasmicProductCard.${nodeName}`;
  }
  return func;
}

export const PlasmicProductCard = Object.assign(
  // Top-level PlasmicProductCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    productLink: makeNodeComponent("productLink"),
    svg: makeNodeComponent("svg"),
    productPrice: makeNodeComponent("productPrice"),
    imageContainer: makeNodeComponent("imageContainer"),
    productTextField: makeNodeComponent("productTextField"),

    // Metadata about props expected for PlasmicProductCard
    internalVariantProps: PlasmicProductCard__VariantProps,
    internalArgProps: PlasmicProductCard__ArgProps
  }
);

export default PlasmicProductCard;
/* prettier-ignore-end */
