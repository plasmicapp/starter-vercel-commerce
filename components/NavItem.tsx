// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import {
  PlasmicNavItem,
  DefaultNavItemProps
} from "./plasmic/next_js_commerce/PlasmicNavItem";
import { HTMLElementRefOf } from "@plasmicapp/react-web";
import { useRouter } from "next/router";

// Your component props start with props for variants and slots you defined
// in Plasmic, but you can add more here, like event handlers that you can
// attach to named nodes in your component.
//
// If you don't want to expose certain variants or slots as a prop, you can use
// Omit to hide them:
//
// interface NavItemProps extends Omit<DefaultNavItemProps, "hideProps1"|"hideProp2"> {
//   // etc.
// }
//
// You can also stop extending from DefaultNavItemProps altogether and have
// total control over the props for your component.
export interface NavItemProps extends DefaultNavItemProps {}

function NavItem_(props: NavItemProps, ref: HTMLElementRefOf<"div">) {
  // Use PlasmicNavItem to render this component as it was
  // designed in Plasmic, by activating the appropriate variants,
  // attaching the appropriate event handlers, etc.  You
  // can also install whatever React hooks you need here to manage state or
  // fetch data.
  //
  // Props you can pass into PlasmicNavItem are:
  // 1. Variants you want to activate,
  // 2. Contents for slots you want to fill,
  // 3. Overrides for any named node in the component to attach behavior and data,
  // 4. Props to set on the root node.
  //
  // By default, we are just piping all NavItemProps here, but feel free
  // to do whatever works for you.

  const { queryParam } = props;
  const router = useRouter();
  let newParams: {query?: string, category?: string, sort?: string} = {};
  const urlParams = new URLSearchParams(queryParam);
  if (queryParam) {
    const currentParams = router.query;
    if (urlParams.has("query")) {
      newParams = { query: urlParams.get("query")! }
    } else if (urlParams.has("sort")) {
      newParams = {
        ...(["query", "category"].reduce((obj, q) => (
          q in currentParams
          ? { ...obj, [q]: currentParams[q]}
          : obj
        ), {})),
        sort: urlParams.get("sort")!
      }
    } else if (urlParams.has("category")) {
      newParams = {
        ...(["sort"].reduce((obj, q) => (
          q in currentParams
          ? { ...obj, [q]: currentParams[q] }
          : obj
        ), {})),
        category: urlParams.get("category")!
      }
    }
  }

  const isActive = Array.from(urlParams.keys()).every(key => urlParams.get(key) === router.query[key]);
  return <PlasmicNavItem root={{ ref }} {...props} 
    onClick={() => {
      if (queryParam) {
        router.push(`/search${
          "category" in newParams
          ? "/" + newParams.category
          : ""
        }?${["query", "sort"].map(q =>
            q in newParams ? `${q}=${(newParams as any)[q]}` : undefined
          ).filter(q => !!q).join("&")
        }`)
      }
    }
  } />;
}

const NavItem = React.forwardRef(NavItem_);
export default NavItem;
